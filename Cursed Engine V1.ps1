# ⚠️ Obfuscated PowerShell Script
$payload = 'IyA9PT0gcnVuX2FpbWJvdC5wczEgPT09DQojIEZ1bGx5IHNlbGYtY29udGFpbmVkIFBvd2VyU2hlbGwgc2NyaXB0IHRoYXQgZW1iZWRzIGFuZCBydW5zIHlvdXIgYWltYm90LnB5DQpbQ29uc29sZV06Ok91dHB1dEVuY29kaW5nID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOA0KIyBUZW1wIHBhdGggZm9yIFB5dGhvbiBzY3JpcHQNCiR0ZW1wUHkgPSAiJGVudjpURU1QXF9jdXJzZWRfYWltYm90X3RlbXAucHkiDQoNCiMgRW1iZWRkZWQgUHl0aG9uIHNjcmlwdCB3cml0dGVuIHRvIHRlbXAgZmlsZQ0KQCINCmltcG9ydCBvcw0KaW1wb3J0IGN2Mg0KaW1wb3J0IHRpbWUNCmltcG9ydCBjdHlwZXMNCmltcG9ydCBweWF1dG9ndWkNCmltcG9ydCBudW1weSBhcyBucA0KaW1wb3J0IG1zcw0KaW1wb3J0IGxvZ2dpbmcNCmN0eXBlcy53aW5kbGwua2VybmVsMzIuU2V0Q29uc29sZVRpdGxlVygiQ3Vyc2VkRW5naW5lIFYxLjAiKQ0KZnJvbSB1bHRyYWx5dGljcyBpbXBvcnQgWU9MTw0KaW1wb3J0IHdpbjMyYXBpLCB3aW4zMmNvbg0KDQpsb2dnaW5nLmdldExvZ2dlcigidWx0cmFseXRpY3MiKS5zZXRMZXZlbChsb2dnaW5nLkNSSVRJQ0FMKQ0KcHlhdXRvZ3VpLkZBSUxTQUZFID0gRmFsc2UNCg0KQ09ORklERU5DRV9USFJFU0hPTEQgPSAwLjUNClNDQU5fSU5URVJWQUwgPSAwDQpEUkFHX0RFTEFZID0gMA0KU01PT1RITkVTUyA9IDAuMzUNCg0KU0NSRUVOX1dJRFRILCBTQ1JFRU5fSEVJR0hUID0gcHlhdXRvZ3VpLnNpemUoKQ0KUkVHSU9OX1NJWkUgPSAzMDANClJFR0lPTl9MRUZUID0gU0NSRUVOX1dJRFRIIC8vIDIgLSBSRUdJT05fU0laRSAvLyAyDQpSRUdJT05fVE9QID0gU0NSRUVOX0hFSUdIVCAvLyAyIC0gUkVHSU9OX1NJWkUgLy8gMg0KU0NSRUVOX1JFR0lPTiA9IHsidG9wIjogUkVHSU9OX1RPUCwgImxlZnQiOiBSRUdJT05fTEVGVCwgIndpZHRoIjogUkVHSU9OX1NJWkUsICJoZWlnaHQiOiBSRUdJT05fU0laRX0NCg0KaWYgbm90IG9zLnBhdGguZXhpc3RzKCJ5b2xvdjhuLnB0Iik6DQogICAgaW1wb3J0IHVybGxpYi5yZXF1ZXN0DQogICAgcHJpbnQoIlsrXSBEb3dubG9hZGluZyBZT0xPdjhuLnB0Li4uIikNCiAgICB1cmxsaWIucmVxdWVzdC51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL3VsdHJhbHl0aWNzL2Fzc2V0cy9yZWxlYXNlcy9kb3dubG9hZC92MC4wLjAveW9sb3Y4bi5wdCIsICJ5b2xvdjhuLnB0IikNCg0KbW9kZWwgPSBZT0xPKCJ5b2xvdjhuLnB0IikNCg0KZGVmIGlzX3ByZXNzZWQoayk6IHJldHVybiB3aW4zMmFwaS5HZXRBc3luY0tleVN0YXRlKGspICYgMHg4MDAwDQpkZWYgbG1iX2hlbGQoKTogcmV0dXJuIGlzX3ByZXNzZWQod2luMzJjb24uVktfTEJVVFRPTikNCmRlZiBtb3ZlX3ZpcnR1YWwoeCwgeSk6IGN0eXBlcy53aW5kbGwudXNlcjMyLm1vdXNlX2V2ZW50KDB4MDAwMSwgeCwgeSwgMCwgMCkNCg0KZGVmIHByaW50X2Jhbm5lcihzdGF0ZSk6DQogICAgb3Muc3lzdGVtKCJjbHMiIGlmIG9zLm5hbWUgPT0gIm50IiBlbHNlICJjbGVhciIpDQogICAgcHJpbnQociIiIg0KICAgX19fX19fX18gIF9fX19fXyBfX19fXyBfX19fX19fX19fICAgICBfX19fX19fICAgX19fX19fX19fX19fXyAgIF9fX19fX19fICAgXyAgICBfX19fXw0KICAvIF9fX18vIC8gLyAvIF9fIC8gX19fLy8gX19fXy8gX18gXCAgIC8gX19fXy8gfCAvIC8gX19fXy8gIF8vIHwgLyAvIF9fX18vICB8IHwgIC8gPCAgLw0KIC8gLyAgIC8gLyAvIC8gL18vIFxfXyBcLyBfXy8gLyAvIC8gLyAgLyBfXy8gLyAgfC8gLyAvIF9fIC8gLy8gIHwvIC8gX18vICAgICB8IHwgLyAvLyAvIA0KLyAvX19fLyAvXy8gLyBfLCBfX19fLyAvIC9fX18vIC9fLyAvICAvIC9fX18vIC98ICAvIC9fLyBfLyAvLyAvfCAgLyAvX19fICAgICB8IHwvIC8vIC8gIA0KXF9fX18vXF9fX18vXy8gfF8vX19fXy9fX19fXy9fX19fXy8gIC9fX19fXy9fLyB8Xy9cX19fXy9fX18vXy8gfF8vX19fX18vICAgICB8X19fLy9fLyAgIA0KIiIiKQ0KICAgIHByaW50KCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIpDQogICAgcHJpbnQoIiBbPl9dIEJhbGFuY2VkIEFpbSBBc3Npc3Q6IFNtYXJ0LCBTbW9vdGgsIGFuZCBTdGlsbCBGYWlyLiIpDQogICAgcHJpbnQoIiBbPl9dIFVzZXMgQUkgdG8gZ3VpZGUgeW91ciBhaW0gLSBvbmx5IHdoZW4geW91J3JlIGFjdGl2ZWx5IGNsaWNraW5nLiIpDQogICAgcHJpbnQoIiBbPl9dIERvZXNuJ3QgZmlyZSBvciBhdXRvLXRyYWNrIC0gaXQgaGVscHMsIG5vdCByZXBsYWNlcyB5b3UuIikNCiAgICBwcmludCgiIFs+X10gRGVzaWduZWQgZm9yIHRyYWluaW5nIGFuZCBpbXByb3ZpbmcgcHJlY2lzaW9uIG5hdHVyYWxseS4iKQ0KICAgIHByaW50KCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIikNCiAgICBwcmludCgiW0YyXSBUb2dnbGUgQWltYm90ICAgW0Y0XSBFeGl0ICAgW0xNQl0gSG9sZCB0byBBaW1cbiIpDQogICAgcHJpbnQoZiJTdGF0dXM6IHsnQWltYm90IEFDVElWRScgaWYgc3RhdGUgZWxzZSAnQWltYm90IElOQUNUSVZFJ31cbiIpDQoNCg0KZGVmIGRldGVjdF9lbmVteSgpOg0KICAgIHdpdGggbXNzLm1zcygpIGFzIHNjdDoNCiAgICAgICAgaW1nID0gbnAuYXJyYXkoc2N0LmdyYWIoU0NSRUVOX1JFR0lPTikpDQogICAgICAgIGltZyA9IGN2Mi5jdnRDb2xvcihpbWcsIGN2Mi5DT0xPUl9CR1JBMkJHUikNCg0KICAgIHJlc3VsdHMgPSBtb2RlbChpbWcsIGNvbmY9Q09ORklERU5DRV9USFJFU0hPTEQsIHZlcmJvc2U9RmFsc2UpDQogICAgYm94ZXMgPSByZXN1bHRzWzBdLmJveGVzLnh5eHkuY3B1KCkubnVtcHkoKQ0KICAgIGNsYXNzZXMgPSByZXN1bHRzWzBdLmJveGVzLmNscy5jcHUoKS5udW1weSgpDQoNCiAgICBiZXN0X3RhcmdldCA9IE5vbmUNCiAgICBiZXN0X2NvbmYgPSAwDQoNCiAgICBmb3IgaSwgYm94IGluIGVudW1lcmF0ZShib3hlcyk6DQogICAgICAgIGNsYXNzX2lkID0gaW50KGNsYXNzZXNbaV0pDQogICAgICAgIGlmIGNsYXNzX2lkID09IDA6DQogICAgICAgICAgICB4MSwgeTEsIHgyLCB5MiA9IG1hcChpbnQsIGJveCkNCiAgICAgICAgICAgIGNvbmYgPSByZXN1bHRzWzBdLmJveGVzLmNvbmZbaV0NCiAgICAgICAgICAgIGN4ID0gUkVHSU9OX0xFRlQgKyAoeDEgKyB4MikgLy8gMg0KICAgICAgICAgICAgY3kgPSBSRUdJT05fVE9QICsgaW50KHkxICsgKHkyIC0geTEpICogMC4yKQ0KICAgICAgICAgICAgaWYgY29uZiA+IGJlc3RfY29uZjoNCiAgICAgICAgICAgICAgICBiZXN0X3RhcmdldCA9IChjeCwgY3kpDQogICAgICAgICAgICAgICAgYmVzdF9jb25mID0gY29uZg0KDQogICAgcmV0dXJuIGJlc3RfdGFyZ2V0DQoNCmRlZiBzbW9vdGhfYWltX3RvKHRhcmdldF94LCB0YXJnZXRfeSk6DQogICAgY3gsIGN5ID0gcHlhdXRvZ3VpLnBvc2l0aW9uKCkNCiAgICBkeCA9IHRhcmdldF94IC0gY3gNCiAgICBkeSA9IHRhcmdldF95IC0gY3kNCiAgICBzdGVwcyA9IG1heChpbnQobnAuaHlwb3QoZHgsIGR5KSAvIFNNT09USE5FU1MgLy8gMS41KSwgMSkNCiAgICBmb3IgXyBpbiByYW5nZShzdGVwcyk6DQogICAgICAgIGlmIG5vdCBsbWJfaGVsZCgpOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIG14ID0gaW50KGR4IC8gc3RlcHMpDQogICAgICAgIG15ID0gaW50KGR5IC8gc3RlcHMpDQogICAgICAgIG1vdmVfdmlydHVhbChteCwgbXkpDQogICAgICAgIHRpbWUuc2xlZXAoRFJBR19ERUxBWSkNCg0KZGVmIG1haW4oKToNCiAgICBhY3RpdmUgPSBGYWxzZQ0KICAgIGxhc3RfdG9nZ2xlID0gMA0KICAgIHByaW50X2Jhbm5lcihhY3RpdmUpDQoNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICBub3cgPSB0aW1lLnRpbWUoKQ0KDQogICAgICAgIGlmIGlzX3ByZXNzZWQod2luMzJjb24uVktfRjIpIGFuZCBub3cgLSBsYXN0X3RvZ2dsZSA+IDAuNToNCiAgICAgICAgICAgIGFjdGl2ZSA9IG5vdCBhY3RpdmUNCiAgICAgICAgICAgIGxhc3RfdG9nZ2xlID0gbm93DQogICAgICAgICAgICBwcmludF9iYW5uZXIoYWN0aXZlKQ0KDQogICAgICAgIGlmIGlzX3ByZXNzZWQod2luMzJjb24uVktfRjQpOg0KICAgICAgICAgICAgcHJpbnQoIlxuWy1dIEV4aXRpbmcuLi4iKQ0KICAgICAgICAgICAgYnJlYWsNCg0KICAgICAgICBpZiBhY3RpdmUgYW5kIGxtYl9oZWxkKCk6DQogICAgICAgICAgICB0YXJnZXQgPSBkZXRlY3RfZW5lbXkoKQ0KICAgICAgICAgICAgaWYgdGFyZ2V0Og0KICAgICAgICAgICAgICAgIHNtb290aF9haW1fdG8oKnRhcmdldCkNCg0KICAgICAgICB0aW1lLnNsZWVwKFNDQU5fSU5URVJWQUwpDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgbWFpbigpDQoiQCB8IFNldC1Db250ZW50IC1FbmNvZGluZyBVVEY4ICR0ZW1wUHkNCg0KIyBJbnN0YWxsIHJlcXVpcmVkIHBhY2thZ2VzIChvcHRpb25hbCwgb25seSBuZWVkZWQgb25jZSkNCnBpcCBpbnN0YWxsIHVsdHJhbHl0aWNzIG1zcyBweWF1dG9ndWkgb3BlbmN2LXB5dGhvbiBweXdpbjMyIC1xDQoNCiMgUnVuIHRoZSBQeXRob24gc2NyaXB0DQpweXRob24gJHRlbXBQeQ0KDQojIENsZWFuIHVwIHRlbXAgZmlsZQ0KUmVtb3ZlLUl0ZW0gJHRlbXBQeSAtRm9yY2UNCg==';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;

# Optional auto-delete:
# Remove-Item -LiteralPath $MyInvocation.MyCommand.Path -Force