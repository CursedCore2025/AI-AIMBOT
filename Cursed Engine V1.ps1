$payload = 'IyA9PT0gcnVuX2FpbWJvdC5wczEgd2l0aCBOYW1lZCBTSUQgTGlzdCBmcm9tIEdpdEh1YiA9PT0NCltDb25zb2xlXTo6T3V0cHV0RW5jb2RpbmcgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4DQoNCiMgPT09IERvd25sb2FkIEF1dGhvcml6ZWQgU0lEIGxpc3QgZnJvbSBHaXRIdWIgPT09DQokZ2l0aHViU2lkVXJsID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9GQUlSeENPTU1VTklUWS9DdXJzZWQvcmVmcy9oZWFkcy9tYWluL0N1cnNlZGVuZ2luZVNJRCINCg0KdHJ5IHsNCiAgICAkc2lkTGluZXMgPSAoSW52b2tlLVdlYlJlcXVlc3QgLVVyaSAkZ2l0aHViU2lkVXJsIC1Vc2VCYXNpY1BhcnNpbmcpLkNvbnRlbnQgLXNwbGl0ICJgbiINCn0gY2F0Y2ggew0KICAgIFdyaXRlLUhvc3QgImBuWyFdIEZhaWxlZCB0byBmZXRjaCBTSUQgbGlzdCBmcm9tIEdpdEh1Yi4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgZXhpdA0KfQ0KDQojIEV4dHJhY3QgYWxsIFNJRHMgZnJvbSB0aGUgbGluZXMgKGlnbm9yZSBuYW1lcykNCiRhdXRob3JpemVkU0lEcyA9IEAoKQ0KZm9yZWFjaCAoJGxpbmUgaW4gJHNpZExpbmVzKSB7DQogICAgaWYgKCRsaW5lIC1tYXRjaCAiUy1cZC1cZCstKFxkKy0/KSsiKSB7DQogICAgICAgICRzaWQgPSAoJGxpbmUgLXNwbGl0ICI6IilbMV0uVHJpbSgpDQogICAgICAgICRhdXRob3JpemVkU0lEcyArPSAkc2lkDQogICAgfQ0KfQ0KDQojIEdldCB0aGUgbG9jYWwgdXNlcidzIFNJRA0KJGxvY2FsU2lkID0gKFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NJZGVudGl0eV06OkdldEN1cnJlbnQoKSkuVXNlci5WYWx1ZQ0KDQojIENvbXBhcmUgYWdhaW5zdCBhdXRob3JpemVkIGxpc3QNCmlmICgkYXV0aG9yaXplZFNJRHMgLW5vdGNvbnRhaW5zICRsb2NhbFNpZCkgew0KICAgIFdyaXRlLUhvc3QgImBuWyFdIEFjY2VzcyBEZW5pZWQ6IFRoaXMgbWFjaGluZSBpcyBub3QgYXV0aG9yaXplZCB0byBydW4gdGhpcyBzY3JpcHQuIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgIFdyaXRlLUhvc3QgIlshXSBMb2NhbCBTSUQ6ICRsb2NhbFNpZCIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICBXcml0ZS1Ib3N0ICJbIV0gQXV0aG9yaXplZCBTSURzOiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICRhdXRob3JpemVkU0lEcyB8IEZvckVhY2gtT2JqZWN0IHsgV3JpdGUtSG9zdCAiICAgICRfIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5IH0NCiAgICBleGl0DQp9DQoNCiMgPT09IFRlbXAgcGF0aCBmb3IgUHl0aG9uIHNjcmlwdCA9PT0NCiR0ZW1wUHkgPSAiJGVudjpURU1QXF9jdXJzZWRfYWltYm90X3RlbXAucHkiDQoNCiMgPT09IEVtYmVkZGVkIFB5dGhvbiBhaW1ib3QgY29kZSA9PT0NCkAiDQppbXBvcnQgb3MNCmltcG9ydCBjdjINCmltcG9ydCB0aW1lDQppbXBvcnQgY3R5cGVzDQppbXBvcnQgcHlhdXRvZ3VpDQppbXBvcnQgbnVtcHkgYXMgbnANCmltcG9ydCBtc3MNCmltcG9ydCBsb2dnaW5nDQpjdHlwZXMud2luZGxsLmtlcm5lbDMyLlNldENvbnNvbGVUaXRsZVcoIkN1cnNlZEVuZ2luZSBWMS4wIikNCmZyb20gdWx0cmFseXRpY3MgaW1wb3J0IFlPTE8NCmltcG9ydCB3aW4zMmFwaSwgd2luMzJjb24NCg0KbG9nZ2luZy5nZXRMb2dnZXIoInVsdHJhbHl0aWNzIikuc2V0TGV2ZWwobG9nZ2luZy5DUklUSUNBTCkNCnB5YXV0b2d1aS5GQUlMU0FGRSA9IEZhbHNlDQoNCkNPTkZJREVOQ0VfVEhSRVNIT0xEID0gMC41DQpTQ0FOX0lOVEVSVkFMID0gMA0KRFJBR19ERUxBWSA9IDANClNNT09USE5FU1MgPSAwLjM1DQoNClNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCA9IHB5YXV0b2d1aS5zaXplKCkNClJFR0lPTl9TSVpFID0gMzAwDQpSRUdJT05fTEVGVCA9IFNDUkVFTl9XSURUSCAvLyAyIC0gUkVHSU9OX1NJWkUgLy8gMg0KUkVHSU9OX1RPUCA9IFNDUkVFTl9IRUlHSFQgLy8gMiAtIFJFR0lPTl9TSVpFIC8vIDINClNDUkVFTl9SRUdJT04gPSB7InRvcCI6IFJFR0lPTl9UT1AsICJsZWZ0IjogUkVHSU9OX0xFRlQsICJ3aWR0aCI6IFJFR0lPTl9TSVpFLCAiaGVpZ2h0IjogUkVHSU9OX1NJWkV9DQoNCmlmIG5vdCBvcy5wYXRoLmV4aXN0cygieW9sb3Y4bi5wdCIpOg0KICAgIGltcG9ydCB1cmxsaWIucmVxdWVzdA0KICAgIHByaW50KCJbK10gRG93bmxvYWRpbmcgWU9MT3Y4bi5wdC4uLiIpDQogICAgdXJsbGliLnJlcXVlc3QudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS91bHRyYWx5dGljcy9hc3NldHMvcmVsZWFzZXMvZG93bmxvYWQvdjAuMC4wL3lvbG92OG4ucHQiLCAieW9sb3Y4bi5wdCIpDQoNCm1vZGVsID0gWU9MTygieW9sb3Y4bi5wdCIpDQoNCmRlZiBpc19wcmVzc2VkKGspOiByZXR1cm4gd2luMzJhcGkuR2V0QXN5bmNLZXlTdGF0ZShrKSAmIDB4ODAwMA0KZGVmIGxtYl9oZWxkKCk6IHJldHVybiBpc19wcmVzc2VkKHdpbjMyY29uLlZLX0xCVVRUT04pDQpkZWYgbW92ZV92aXJ0dWFsKHgsIHkpOiBjdHlwZXMud2luZGxsLnVzZXIzMi5tb3VzZV9ldmVudCgweDAwMDEsIHgsIHksIDAsIDApDQoNCmRlZiBwcmludF9iYW5uZXIoc3RhdGUpOg0KICAgIG9zLnN5c3RlbSgiY2xzIiBpZiBvcy5uYW1lID09ICJudCIgZWxzZSAiY2xlYXIiKQ0KICAgIHByaW50KHIiIiINCiAgIF9fX19fX19fICBfX19fX18gX19fX18gX19fX19fX19fXyAgICAgX19fX19fXyAgIF9fX19fX19fX19fX18gICBfX19fX19fXyAgIF8gICAgX19fX18NCiAgLyBfX19fLyAvIC8gLyBfXyAvIF9fXy8vIF9fX18vIF9fIFwgICAvIF9fX18vIHwgLyAvIF9fX18vICBfLyB8IC8gLyBfX19fLyAgfCB8ICAvIDwgIC8NCiAvIC8gICAvIC8gLyAvIC9fLyBcX18gXC8gX18vIC8gLyAvIC8gIC8gX18vIC8gIHwvIC8gLyBfXyAvIC8vICB8LyAvIF9fLyAgICAgfCB8IC8gLy8gLyANCi8gL19fXy8gL18vIC8gXywgX19fXy8gLyAvX19fLyAvXy8gLyAgLyAvX19fLyAvfCAgLyAvXy8gXy8gLy8gL3wgIC8gL19fXyAgICAgfCB8LyAvLyAvICANClxfX19fL1xfX19fL18vIHxfL19fX18vX19fX18vX19fX18vICAvX19fX18vXy8gfF8vXF9fX18vX19fL18vIHxfL19fX19fLyAgICAgfF9fXy8vXy8gICANCiIiIikNCiAgICBwcmludCgiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iKQ0KICAgIHByaW50KCIgWz5fXSBCYWxhbmNlZCBBaW0gQXNzaXN0OiBTbWFydCwgU21vb3RoLCBhbmQgU3RpbGwgRmFpci4iKQ0KICAgIHByaW50KCIgWz5fXSBVc2VzIEFJIHRvIGd1aWRlIHlvdXIgYWltIC0gb25seSB3aGVuIHlvdSdyZSBhY3RpdmVseSBjbGlja2luZy4iKQ0KICAgIHByaW50KCIgWz5fXSBEb2Vzbid0IGZpcmUgb3IgYXV0by10cmFjayAtIGl0IGhlbHBzLCBub3QgcmVwbGFjZXMgeW91LiIpDQogICAgcHJpbnQoIiBbPl9dIERlc2lnbmVkIGZvciB0cmFpbmluZyBhbmQgaW1wcm92aW5nIHByZWNpc2lvbiBuYXR1cmFsbHkuIikNCiAgICBwcmludCgiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiIpDQogICAgcHJpbnQoIltGMl0gVG9nZ2xlIEFpbUFzc2lzdCAgIFtGNF0gRXhpdCAgIFtMTUJdIEhvbGQgdG8gQWltXG4iKQ0KICAgIHByaW50KGYiU3RhdHVzOiB7J0FDVElWRScgaWYgc3RhdGUgZWxzZSAnSU5BQ1RJVkUnfVxuIikNCg0KZGVmIGRldGVjdF9lbmVteSgpOg0KICAgIHdpdGggbXNzLm1zcygpIGFzIHNjdDoNCiAgICAgICAgaW1nID0gbnAuYXJyYXkoc2N0LmdyYWIoU0NSRUVOX1JFR0lPTikpDQogICAgICAgIGltZyA9IGN2Mi5jdnRDb2xvcihpbWcsIGN2Mi5DT0xPUl9CR1JBMkJHUikNCg0KICAgIHJlc3VsdHMgPSBtb2RlbChpbWcsIGNvbmY9Q09ORklERU5DRV9USFJFU0hPTEQsIHZlcmJvc2U9RmFsc2UpDQogICAgYm94ZXMgPSByZXN1bHRzWzBdLmJveGVzLnh5eHkuY3B1KCkubnVtcHkoKQ0KICAgIGNsYXNzZXMgPSByZXN1bHRzWzBdLmJveGVzLmNscy5jcHUoKS5udW1weSgpDQoNCiAgICBiZXN0X3RhcmdldCA9IE5vbmUNCiAgICBiZXN0X2NvbmYgPSAwDQoNCiAgICBmb3IgaSwgYm94IGluIGVudW1lcmF0ZShib3hlcyk6DQogICAgICAgIGNsYXNzX2lkID0gaW50KGNsYXNzZXNbaV0pDQogICAgICAgIGlmIGNsYXNzX2lkID09IDA6DQogICAgICAgICAgICB4MSwgeTEsIHgyLCB5MiA9IG1hcChpbnQsIGJveCkNCiAgICAgICAgICAgIGNvbmYgPSByZXN1bHRzWzBdLmJveGVzLmNvbmZbaV0NCiAgICAgICAgICAgIGN4ID0gUkVHSU9OX0xFRlQgKyAoeDEgKyB4MikgLy8gMg0KICAgICAgICAgICAgY3kgPSBSRUdJT05fVE9QICsgaW50KHkxICsgKHkyIC0geTEpICogMC4yKQ0KICAgICAgICAgICAgaWYgY29uZiA+IGJlc3RfY29uZjoNCiAgICAgICAgICAgICAgICBiZXN0X3RhcmdldCA9IChjeCwgY3kpDQogICAgICAgICAgICAgICAgYmVzdF9jb25mID0gY29uZg0KDQogICAgcmV0dXJuIGJlc3RfdGFyZ2V0DQoNCmRlZiBzbW9vdGhfYWltX3RvKHRhcmdldF94LCB0YXJnZXRfeSk6DQogICAgY3gsIGN5ID0gcHlhdXRvZ3VpLnBvc2l0aW9uKCkNCiAgICBkeCA9IHRhcmdldF94IC0gY3gNCiAgICBkeSA9IHRhcmdldF95IC0gY3kNCiAgICBzdGVwcyA9IG1heChpbnQobnAuaHlwb3QoZHgsIGR5KSAvIFNNT09USE5FU1MgLy8gMS41KSwgMSkNCiAgICBmb3IgXyBpbiByYW5nZShzdGVwcyk6DQogICAgICAgIGlmIG5vdCBsbWJfaGVsZCgpOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIG14ID0gaW50KGR4IC8gc3RlcHMpDQogICAgICAgIG15ID0gaW50KGR5IC8gc3RlcHMpDQogICAgICAgIG1vdmVfdmlydHVhbChteCwgbXkpDQogICAgICAgIHRpbWUuc2xlZXAoRFJBR19ERUxBWSkNCg0KZGVmIG1haW4oKToNCiAgICBhY3RpdmUgPSBGYWxzZQ0KICAgIGxhc3RfdG9nZ2xlID0gMA0KICAgIHByaW50X2Jhbm5lcihhY3RpdmUpDQoNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICBub3cgPSB0aW1lLnRpbWUoKQ0KDQogICAgICAgIGlmIGlzX3ByZXNzZWQod2luMzJjb24uVktfRjIpIGFuZCBub3cgLSBsYXN0X3RvZ2dsZSA+IDAuNToNCiAgICAgICAgICAgIGFjdGl2ZSA9IG5vdCBhY3RpdmUNCiAgICAgICAgICAgIGxhc3RfdG9nZ2xlID0gbm93DQogICAgICAgICAgICBwcmludF9iYW5uZXIoYWN0aXZlKQ0KDQogICAgICAgIGlmIGlzX3ByZXNzZWQod2luMzJjb24uVktfRjQpOg0KICAgICAgICAgICAgcHJpbnQoIlxuWy1dIEV4aXRpbmcuLi4iKQ0KICAgICAgICAgICAgYnJlYWsNCg0KICAgICAgICBpZiBhY3RpdmUgYW5kIGxtYl9oZWxkKCk6DQogICAgICAgICAgICB0YXJnZXQgPSBkZXRlY3RfZW5lbXkoKQ0KICAgICAgICAgICAgaWYgdGFyZ2V0Og0KICAgICAgICAgICAgICAgIHNtb290aF9haW1fdG8oKnRhcmdldCkNCg0KICAgICAgICB0aW1lLnNsZWVwKFNDQU5fSU5URVJWQUwpDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgbWFpbigpDQoiQCB8IFNldC1Db250ZW50IC1FbmNvZGluZyBVVEY4ICR0ZW1wUHkNCg0KIyBJbnN0YWxsIHJlcXVpcmVkIFB5dGhvbiBwYWNrYWdlcyBzaWxlbnRseQ0KcGlwIGluc3RhbGwgdWx0cmFseXRpY3MgbXNzIHB5YXV0b2d1aSBvcGVuY3YtcHl0aG9uIHB5d2luMzIgLXENCg0KIyBSdW4gdGhlIGVtYmVkZGVkIFB5dGhvbiBhaW1ib3Qgc2NyaXB0DQpweXRob24gJHRlbXBQeQ0KDQojIENsZWFuIHVwIHRlbXBvcmFyeSBmaWxlDQpSZW1vdmUtSXRlbSAkdGVtcFB5IC1Gb3JjZQ0K';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;
