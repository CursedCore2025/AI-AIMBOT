$payload = 'IyA9PT0gcnVuX2FpbWJvdC5wczEgd2l0aCBOYW1lZCBTSUQgTGlzdCBmcm9tIEdpdEh1YiA9PT0NCltDb25zb2xlXTo6T3V0cHV0RW5jb2RpbmcgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4DQoNCiMgPT09IERvd25sb2FkIEF1dGhvcml6ZWQgU0lEIGxpc3QgZnJvbSBHaXRIdWIgPT09DQokZ2l0aHViU2lkVXJsID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9GQUlSeENPTU1VTklUWS9DdXJzZWQvcmVmcy9oZWFkcy9tYWluL0N1cnNlZGVuZ2luZVNJRCINCg0KdHJ5IHsNCiAgICAkc2lkTGluZXMgPSAoSW52b2tlLVdlYlJlcXVlc3QgLVVyaSAkZ2l0aHViU2lkVXJsIC1Vc2VCYXNpY1BhcnNpbmcpLkNvbnRlbnQgLXNwbGl0ICJgbiINCn0gY2F0Y2ggew0KICAgIFdyaXRlLUhvc3QgImBuWyFdIEZhaWxlZCB0byBmZXRjaCBTSUQgbGlzdCBmcm9tIEdpdEh1Yi4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkDQogICAgZXhpdA0KfQ0KDQojIEV4dHJhY3QgYWxsIFNJRHMgZnJvbSB0aGUgbGluZXMgKGlnbm9yZSBuYW1lcykNCiRhdXRob3JpemVkU0lEcyA9IEAoKQ0KZm9yZWFjaCAoJGxpbmUgaW4gJHNpZExpbmVzKSB7DQogICAgaWYgKCRsaW5lIC1tYXRjaCAiUy1cZC1cZCstKFxkKy0/KSsiKSB7DQogICAgICAgICRzaWQgPSAoJGxpbmUgLXNwbGl0ICI6IilbMV0uVHJpbSgpDQogICAgICAgICRhdXRob3JpemVkU0lEcyArPSAkc2lkDQogICAgfQ0KfQ0KDQojIEdldCB0aGUgbG9jYWwgdXNlcidzIFNJRA0KJGxvY2FsU2lkID0gKFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NJZGVudGl0eV06OkdldEN1cnJlbnQoKSkuVXNlci5WYWx1ZQ0KDQojIENvbXBhcmUgYWdhaW5zdCBhdXRob3JpemVkIGxpc3QNCmlmICgkYXV0aG9yaXplZFNJRHMgLW5vdGNvbnRhaW5zICRsb2NhbFNpZCkgew0KICAgIFdyaXRlLUhvc3QgImBuWyFdIEFjY2VzcyBEZW5pZWQ6IFRoaXMgbWFjaGluZSBpcyBub3QgYXV0aG9yaXplZCB0byBydW4gdGhpcyBzY3JpcHQuIiAtRm9yZWdyb3VuZENvbG9yIFJlZA0KICAgIFdyaXRlLUhvc3QgIlshXSBMb2NhbCBTSUQ6ICRsb2NhbFNpZCIgLUZvcmVncm91bmRDb2xvciBZZWxsb3cNCiAgICBXcml0ZS1Ib3N0ICJbIV0gQXV0aG9yaXplZCBTSURzOiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JheQ0KICAgICRhdXRob3JpemVkU0lEcyB8IEZvckVhY2gtT2JqZWN0IHsgV3JpdGUtSG9zdCAiICAgICRfIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5IH0NCiAgICBleGl0DQp9DQoNCiMgPT09IFRlbXAgcGF0aCBmb3IgUHl0aG9uIHNjcmlwdCA9PT0NCiR0ZW1wUHkgPSAiJGVudjpURU1QXF9jdXJzZWRfYWltYm90X3RlbXAucHkiDQoNCiMgPT09IEVtYmVkZGVkIFB5dGhvbiBhaW1ib3QgY29kZSA9PT0NCkAiDQppbXBvcnQgb3MNCmltcG9ydCBjdjINCmltcG9ydCB0aW1lDQppbXBvcnQgY3R5cGVzDQppbXBvcnQgcHlhdXRvZ3VpDQppbXBvcnQgbnVtcHkgYXMgbnANCmltcG9ydCBtc3MNCmltcG9ydCBsb2dnaW5nDQpjdHlwZXMud2luZGxsLmtlcm5lbDMyLlNldENvbnNvbGVUaXRsZVcoIkN1cnNlZEVuZ2luZSBWMS4wIikNCmZyb20gdWx0cmFseXRpY3MgaW1wb3J0IFlPTE8NCmltcG9ydCB3aW4zMmFwaSwgd2luMzJjb24NCg0KbG9nZ2luZy5nZXRMb2dnZXIoInVsdHJhbHl0aWNzIikuc2V0TGV2ZWwobG9nZ2luZy5DUklUSUNBTCkNCnB5YXV0b2d1aS5GQUlMU0FGRSA9IEZhbHNlDQoNCkNPTkZJREVOQ0VfVEhSRVNIT0xEID0gMC41DQpTQ0FOX0lOVEVSVkFMID0gMA0KRFJBR19ERUxBWSA9IDANClNNT09USE5FU1MgPSAwLjM1DQoNClNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCA9IHB5YXV0b2d1aS5zaXplKCkNClJFR0lPTl9TSVpFID0gMzAwDQpSRUdJT05fTEVGVCA9IFNDUkVFTl9XSURUSCAvLyAyIC0gUkVHSU9OX1NJWkUgLy8gMg0KUkVHSU9OX1RPUCA9IFNDUkVFTl9IRUlHSFQgLy8gMiAtIFJFR0lPTl9TSVpFIC8vIDINClNDUkVFTl9SRUdJT04gPSB7InRvcCI6IFJFR0lPTl9UT1AsICJsZWZ0IjogUkVHSU9OX0xFRlQsICJ3aWR0aCI6IFJFR0lPTl9TSVpFLCAiaGVpZ2h0IjogUkVHSU9OX1NJWkV9DQoNCmlmIG5vdCBvcy5wYXRoLmV4aXN0cygieW9sb3Y4bi5wdCIpOg0KICAgIGltcG9ydCB1cmxsaWIucmVxdWVzdA0KICAgIHByaW50KCJbK10gRG93bmxvYWRpbmcgWU9MT3Y4bi5wdC4uLiIpDQogICAgdXJsbGliLnJlcXVlc3QudXJscmV0cmlldmUoImh0dHBzOi8vZ2l0aHViLmNvbS91bHRyYWx5dGljcy9hc3NldHMvcmVsZWFzZXMvZG93bmxvYWQvdjAuMC4wL3lvbG92OG4ucHQiLCAieW9sb3Y4bi5wdCIpDQoNCm1vZGVsID0gWU9MTygieW9sb3Y4bi5wdCIpDQoNCmRlZiBpc19wcmVzc2VkKGspOiByZXR1cm4gd2luMzJhcGkuR2V0QXN5bmNLZXlTdGF0ZShrKSAmIDB4ODAwMA0KZGVmIGxtYl9oZWxkKCk6IHJldHVybiBpc19wcmVzc2VkKHdpbjMyY29uLlZLX0xCVVRUT04pDQpkZWYgbW92ZV92aXJ0dWFsKHgsIHkpOiBjdHlwZXMud2luZGxsLnVzZXIzMi5tb3VzZV9ldmVudCgweDAwMDEsIHgsIHksIDAsIDApDQoNCmRlZiBwcmludF9iYW5uZXIoc3RhdGUpOg0KICAgIG9zLnN5c3RlbSgiY2xzIiBpZiBvcy5uYW1lID09ICJudCIgZWxzZSAiY2xlYXIiKQ0KICAgIHByaW50KHIiIiINCiAgIF9fX19fX19fICBfX19fX18gX19fX18gX19fX19fX19fXyAgICAgX19fX19fXyAgIF9fX19fX19fX19fX18gICBfX19fX19fXyAgIF8gICAgX19fX18NCiAgLyBfX19fLyAvIC8gLyBfXyAvIF9fXy8vIF9fX18vIF9fIFwgICAvIF9fX18vIHwgLyAvIF9fX18vICBfLyB8IC8gLyBfX19fLyAgfCB8ICAvIDwgIC8NCiAvIC8gICAvIC8gLyAvIC9fLyBcX18gXC8gX18vIC8gLyAvIC8gIC8gX18vIC8gIHwvIC8gLyBfXyAvIC8vICB8LyAvIF9fLyAgICAgfCB8IC8gLy8gLyANCi8gL19fXy8gL18vIC8gXywgX19fXy8gLyAvX19fLyAvXy8gLyAgLyAvX19fLyAvfCAgLyAvXy8gXy8gLy8gL3wgIC8gL19fXyAgICAgfCB8LyAvLyAvICANClxfX19fL1xfX19fL18vIHxfL19fX18vX19fX18vX19fX18vICAvX19fX18vXy8gfF8vXF9fX18vX19fL18vIHxfL19fX19fLyAgICAgfF9fXy8vXy8gICANCiIiIikNCiAgICBwcmludCgiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0iKQ0KICAgIHByaW50KCIgWz5fXSBCYWxhbmNlZCBBaW0gQXNzaXN0OiBTbWFydCwgU21vb3RoLCBhbmQgU3RpbGwgRmFpci4iKQ0KICAgIHByaW50KCIgWz5fXSBVc2VzIEFJIHRvIGd1aWRlIHlvdXIgYWltIC0gb25seSB3aGVuIHlvdSdyZSBhY3RpdmVseSBjbGlja2luZy4iKQ0KICAgIHByaW50KCIgWz5fXSBEb2Vzbid0IGZpcmUgb3IgYXV0by10cmFjayAtIGl0IGhlbHBzLCBub3QgcmVwbGFjZXMgeW91LiIpDQogICAgcHJpbnQoIiBbPl9dIERlc2lnbmVkIGZvciB0cmFpbmluZyBhbmQgaW1wcm92aW5nIHByZWNpc2lvbiBuYXR1cmFsbHkuIikNCiAgICBwcmludCgiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiIpDQogICAgcHJpbnQoIltGMl0gVG9nZ2xlIEFpbWJvdCAgIFtGNF0gRXhpdCAgIFtMTUJdIEhvbGQgdG8gQWltXG4iKQ0KICAgIHByaW50KGYiU3RhdHVzOiB7J0FpbWJvdCBBQ1RJVkUnIGlmIHN0YXRlIGVsc2UgJ0FpbWJvdCBJTkFDVElWRSd9XG4iKQ0KDQpkZWYgZGV0ZWN0X2VuZW15KCk6DQogICAgd2l0aCBtc3MubXNzKCkgYXMgc2N0Og0KICAgICAgICBpbWcgPSBucC5hcnJheShzY3QuZ3JhYihTQ1JFRU5fUkVHSU9OKSkNCiAgICAgICAgaW1nID0gY3YyLmN2dENvbG9yKGltZywgY3YyLkNPTE9SX0JHUkEyQkdSKQ0KDQogICAgcmVzdWx0cyA9IG1vZGVsKGltZywgY29uZj1DT05GSURFTkNFX1RIUkVTSE9MRCwgdmVyYm9zZT1GYWxzZSkNCiAgICBib3hlcyA9IHJlc3VsdHNbMF0uYm94ZXMueHl4eS5jcHUoKS5udW1weSgpDQogICAgY2xhc3NlcyA9IHJlc3VsdHNbMF0uYm94ZXMuY2xzLmNwdSgpLm51bXB5KCkNCg0KICAgIGJlc3RfdGFyZ2V0ID0gTm9uZQ0KICAgIGJlc3RfY29uZiA9IDANCg0KICAgIGZvciBpLCBib3ggaW4gZW51bWVyYXRlKGJveGVzKToNCiAgICAgICAgY2xhc3NfaWQgPSBpbnQoY2xhc3Nlc1tpXSkNCiAgICAgICAgaWYgY2xhc3NfaWQgPT0gMDoNCiAgICAgICAgICAgIHgxLCB5MSwgeDIsIHkyID0gbWFwKGludCwgYm94KQ0KICAgICAgICAgICAgY29uZiA9IHJlc3VsdHNbMF0uYm94ZXMuY29uZltpXQ0KICAgICAgICAgICAgY3ggPSBSRUdJT05fTEVGVCArICh4MSArIHgyKSAvLyAyDQogICAgICAgICAgICBjeSA9IFJFR0lPTl9UT1AgKyBpbnQoeTEgKyAoeTIgLSB5MSkgKiAwLjIpDQogICAgICAgICAgICBpZiBjb25mID4gYmVzdF9jb25mOg0KICAgICAgICAgICAgICAgIGJlc3RfdGFyZ2V0ID0gKGN4LCBjeSkNCiAgICAgICAgICAgICAgICBiZXN0X2NvbmYgPSBjb25mDQoNCiAgICByZXR1cm4gYmVzdF90YXJnZXQNCg0KZGVmIHNtb290aF9haW1fdG8odGFyZ2V0X3gsIHRhcmdldF95KToNCiAgICBjeCwgY3kgPSBweWF1dG9ndWkucG9zaXRpb24oKQ0KICAgIGR4ID0gdGFyZ2V0X3ggLSBjeA0KICAgIGR5ID0gdGFyZ2V0X3kgLSBjeQ0KICAgIHN0ZXBzID0gbWF4KGludChucC5oeXBvdChkeCwgZHkpIC8gU01PT1RITkVTUyAvLyAxLjUpLCAxKQ0KICAgIGZvciBfIGluIHJhbmdlKHN0ZXBzKToNCiAgICAgICAgaWYgbm90IGxtYl9oZWxkKCk6DQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgbXggPSBpbnQoZHggLyBzdGVwcykNCiAgICAgICAgbXkgPSBpbnQoZHkgLyBzdGVwcykNCiAgICAgICAgbW92ZV92aXJ0dWFsKG14LCBteSkNCiAgICAgICAgdGltZS5zbGVlcChEUkFHX0RFTEFZKQ0KDQpkZWYgbWFpbigpOg0KICAgIGFjdGl2ZSA9IEZhbHNlDQogICAgbGFzdF90b2dnbGUgPSAwDQogICAgcHJpbnRfYmFubmVyKGFjdGl2ZSkNCg0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIG5vdyA9IHRpbWUudGltZSgpDQoNCiAgICAgICAgaWYgaXNfcHJlc3NlZCh3aW4zMmNvbi5WS19GMikgYW5kIG5vdyAtIGxhc3RfdG9nZ2xlID4gMC41Og0KICAgICAgICAgICAgYWN0aXZlID0gbm90IGFjdGl2ZQ0KICAgICAgICAgICAgbGFzdF90b2dnbGUgPSBub3cNCiAgICAgICAgICAgIHByaW50X2Jhbm5lcihhY3RpdmUpDQoNCiAgICAgICAgaWYgaXNfcHJlc3NlZCh3aW4zMmNvbi5WS19GNCk6DQogICAgICAgICAgICBwcmludCgiXG5bLV0gRXhpdGluZy4uLiIpDQogICAgICAgICAgICBicmVhaw0KDQogICAgICAgIGlmIGFjdGl2ZSBhbmQgbG1iX2hlbGQoKToNCiAgICAgICAgICAgIHRhcmdldCA9IGRldGVjdF9lbmVteSgpDQogICAgICAgICAgICBpZiB0YXJnZXQ6DQogICAgICAgICAgICAgICAgc21vb3RoX2FpbV90bygqdGFyZ2V0KQ0KDQogICAgICAgIHRpbWUuc2xlZXAoU0NBTl9JTlRFUlZBTCkNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBtYWluKCkNCiJAIHwgU2V0LUNvbnRlbnQgLUVuY29kaW5nIFVURjggJHRlbXBQeQ0KDQojIEluc3RhbGwgcmVxdWlyZWQgUHl0aG9uIHBhY2thZ2VzIHNpbGVudGx5DQpwaXAgaW5zdGFsbCB1bHRyYWx5dGljcyBtc3MgcHlhdXRvZ3VpIG9wZW5jdi1weXRob24gcHl3aW4zMiAtcQ0KDQojIFJ1biB0aGUgZW1iZWRkZWQgUHl0aG9uIGFpbWJvdCBzY3JpcHQNCnB5dGhvbiAkdGVtcFB5DQoNCiMgQ2xlYW4gdXAgdGVtcG9yYXJ5IGZpbGUNClJlbW92ZS1JdGVtICR0ZW1wUHkgLUZvcmNlDQo=';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;
