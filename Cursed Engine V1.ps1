$payload = 'W0NvbnNvbGVdOjpPdXRwdXRFbmNvZGluZyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjgNCg0KJHRlbXBQeSA9ICIkZW52OlRFTVBcX2N1cnNlZF9haW1fYXNzaXN0LnB5Ig0KDQpAIg0KaW1wb3J0IG9zDQppbXBvcnQgY3YyDQppbXBvcnQgdGltZQ0KaW1wb3J0IGN0eXBlcw0KaW1wb3J0IHB5YXV0b2d1aQ0KaW1wb3J0IG51bXB5IGFzIG5wDQppbXBvcnQgbXNzDQppbXBvcnQgbG9nZ2luZw0KZnJvbSB1bHRyYWx5dGljcyBpbXBvcnQgWU9MTw0KaW1wb3J0IHdpbjMyYXBpLCB3aW4zMmNvbg0KDQojIEVuYWJsZSBBTlNJIGNvbG9ycyBvbiBXaW5kb3dzDQpvcy5zeXN0ZW0oIiIpDQoNCiMgQ29uc29sZSBzZXR1cA0KY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5TZXRDb25zb2xlVGl0bGVXKCJDdXJzZWQgQWltIEFzc2lzdCB2MS4wIikNCmxvZ2dpbmcuZ2V0TG9nZ2VyKCJ1bHRyYWx5dGljcyIpLnNldExldmVsKGxvZ2dpbmcuQ1JJVElDQUwpDQpweWF1dG9ndWkuRkFJTFNBRkUgPSBGYWxzZQ0KDQojIFNldHRpbmdzDQpDT05GSURFTkNFX1RIUkVTSE9MRCA9IDAuNQ0KU0NBTl9JTlRFUlZBTCA9IDAuMDA1DQpVUFdBUkRfRk9SQ0UgPSAtOS42DQpERVRFQ1RJT05fV0lEVEggPSA0MDANCkRFVEVDVElPTl9IRUlHSFQgPSAzMDANCg0KIyBTY3JlZW4gcmVnaW9uIChyaWdodCBzaWRlIG9mIGNyb3NzaGFpcikNClNDUkVFTl9XSURUSCwgU0NSRUVOX0hFSUdIVCA9IHB5YXV0b2d1aS5zaXplKCkNClJFR0lPTl9MRUZUID0gU0NSRUVOX1dJRFRIIC8vIDINClJFR0lPTl9UT1AgPSBTQ1JFRU5fSEVJR0hUIC8vIDIgLSBERVRFQ1RJT05fSEVJR0hUIC8vIDINClNDUkVFTl9SRUdJT04gPSB7DQogICAgInRvcCI6IFJFR0lPTl9UT1AsDQogICAgImxlZnQiOiBSRUdJT05fTEVGVCwNCiAgICAid2lkdGgiOiBERVRFQ1RJT05fV0lEVEgsDQogICAgImhlaWdodCI6IERFVEVDVElPTl9IRUlHSFQNCn0NCg0KIyBBdXRvIGRvd25sb2FkIFlPTE92OG4gbW9kZWwgaWYgbWlzc2luZw0KaWYgbm90IG9zLnBhdGguZXhpc3RzKCJ5b2xvdjhuLnB0Iik6DQogICAgaW1wb3J0IHVybGxpYi5yZXF1ZXN0DQogICAgcHJpbnQoIlsrXSBEb3dubG9hZGluZyB5b2xvdjhuLnB0Li4uIikNCiAgICB1cmxsaWIucmVxdWVzdC51cmxyZXRyaWV2ZSgiaHR0cHM6Ly9naXRodWIuY29tL3VsdHJhbHl0aWNzL2Fzc2V0cy9yZWxlYXNlcy9kb3dubG9hZC92MC4wLjAveW9sb3Y4bi5wdCIsICJ5b2xvdjhuLnB0IikNCg0KbW9kZWwgPSBZT0xPKCJ5b2xvdjhuLnB0IikNCg0KIyBJbnB1dCBoZWxwZXJzDQpkZWYgaXNfcHJlc3NlZChrKTogcmV0dXJuIHdpbjMyYXBpLkdldEFzeW5jS2V5U3RhdGUoaykgJiAweDgwMDANCmRlZiBsbWJfaGVsZCgpOiByZXR1cm4gaXNfcHJlc3NlZCh3aW4zMmNvbi5WS19MQlVUVE9OKQ0KZGVmIG1vdmVfdmlydHVhbCh4LCB5KTogY3R5cGVzLndpbmRsbC51c2VyMzIubW91c2VfZXZlbnQoMHgwMDAxLCBpbnQoeCksIGludCh5KSwgMCwgMCkNCg0KZGVmIHByaW50X2Jhbm5lcihzdGF0ZSk6DQogICAgaW1wb3J0IHNodXRpbA0KDQogICAgb3Muc3lzdGVtKCJjbHMiIGlmIG9zLm5hbWUgPT0gIm50IiBlbHNlICJjbGVhciIpDQogICAgY29sdW1ucyA9IHNodXRpbC5nZXRfdGVybWluYWxfc2l6ZSgoODAsIDIwKSkuY29sdW1ucw0KDQogICAgUkVEID0gIlwwMzNbOTFtIg0KICAgIEdSRUVOID0gIlwwMzNbOTJtIg0KICAgIENZQU4gPSAiXDAzM1s5Nm0iDQogICAgV0hJVEUgPSAiXDAzM1s5N20iDQogICAgQk9MRCA9ICJcMDMzWzFtIg0KICAgIFJFU0VUID0gIlwwMzNbMG0iDQogICAgWUVMTE9XID0gIlwwMzNbOTNtIg0KDQogICAgYXNjaWlfYXJ0ID0gWw0KICAgICAgICByIiAgIF9fX19fX19fICBfX19fX18gX19fX18gX19fX19fX19fXyAgICAgX19fX19fXyAgIF9fX19fX19fX19fX18gICBfX19fX19fXyAgIF8gICAgX19fX18iLA0KICAgICAgICByIiAgLyBfX19fLyAvIC8gLyBfXyAvIF9fXy8vIF9fX18vIF9fIFwgICAvIF9fX18vIHwgLyAvIF9fX18vICBfLyB8IC8gLyBfX19fLyAgfCB8ICAvIDwgIC8iLA0KICAgICAgICByIiAvIC8gICAvIC8gLyAvIC9fLyBcX18gXC8gX18vIC8gLyAvIC8gIC8gX18vIC8gIHwvIC8gLyBfXyAvIC8vICB8LyAvIF9fLyAgICAgfCB8IC8gLy8gLyAiLA0KICAgICAgICByIi8gL19fXy8gL18vIC8gXywgX19fXy8gLyAvX19fLyAvXy8gLyAgLyAvX19fLyAvfCAgLyAvXy8gXy8gLy8gL3wgIC8gL19fXyAgICAgfCB8LyAvLyAvICAiLA0KICAgICAgICByIlxfX19fL1xfX19fL18vIHxfL19fX18vX19fX18vX19fX18vICAvX19fX18vXy8gfF8vXF9fX18vX19fL18vIHxfL19fX19fLyAgICAgfF9fXy8vXy8gICAiLA0KICAgICAgICAiIiwNCiAgICAgICAgZiJ7Qk9MRH17V0hJVEV9Q3Vyc2VkIEFpbSBBc3Npc3QgdjEuMCB8IEVuZ2luZWVyZWQgQWNjdXJhY3l7UkVTRVR9Ig0KICAgIF0NCg0KICAgIGluZm9fYmxvY2sgPSBbDQogICAgICAgIGYie1dISVRFfSIgKyAiLSIgKiA4MCArIGYie1JFU0VUfSIsDQogICAgICAgIGYie0JPTER9RGVzaWduZWQgZm9yIGV0aGljYWwgZW5oYW5jZW1lbnR7UkVTRVR9LCBDdXJzZWQgQWltIEFzc2lzdCBpbnRlbGxpZ2VudGx5IHN1cHBvcnRzIHlvdXIgYWltIiwNCiAgICAgICAgIndpdGhvdXQgYnJlYWtpbmcgdGhlIGdhbWUncyBiYWxhbmNlLiBJdCB1c2VzIGFkdmFuY2VkIG9iamVjdCBkZXRlY3Rpb24gKHswfVlPTE92OG57MX0pIi5mb3JtYXQoWUVMTE9XLCBSRVNFVCksDQogICAgICAgICJhbmQgcmVnaW9uLWxpbWl0ZWQgYW5hbHlzaXMgdG8gb25seSBlbmdhZ2Ugd2hlbiB5b3VyIHRhcmdldCBpcyBjbGVhcmx5IGlkZW50aWZpZWQuIiwNCiAgICAgICAgIiIsDQogICAgICAgIGYiVGhpcyB0b29sIGFwcGxpZXMge0dSRUVOfXZpcnR1YWwgaW5wdXQgZm9yY2Vze1JFU0VUfSB0byBoZWxwIHlvdSBzdGF5IGxvY2tlZCBpbiBkdXJpbmcgY29tYmF0IC0iLA0KICAgICAgICBmIntCT0xEfU5vIGF1dG8tc2hvb3QuIE5vIGxvY2stb24uIE5vIHdhbGxoYWNrcy57UkVTRVR9IiwNCiAgICAgICAgIiIsDQogICAgICAgIGYie1dISVRFfVs+XSB7WUVMTE9XfUZhaXIsIGFzc2lzdGl2ZSwgaHVtYW5pemVkIHByZWNpc2lvbntSRVNFVH0iLA0KICAgICAgICBmIntXSElURX1bPl0ge1lFTExPV31Qb3dlcmVkIGJ5IHJlYWwtdGltZSBjb21wdXRlciB2aXNpb257UkVTRVR9IiwNCiAgICAgICAgZiJ7V0hJVEV9Wz5dIHtZRUxMT1d9TGlnaHR3ZWlnaHQgJiB0b2dnbGVhYmxlIGFueXRpbWV7UkVTRVR9IiwNCiAgICAgICAgZiJ7V0hJVEV9IiArICItIiAqIDgwICsgZiJ7UkVTRVR9IiwNCiAgICAgICAgZiJ7Qk9MRH1bTE1CXXtSRVNFVH0gVHJpZ2dlciBBc3Npc3QgICAgIHtCT0xEfVtGMl17UkVTRVR9IFRvZ2dsZSBPTi9PRkYgICAgIHtCT0xEfVtGNF17UkVTRVR9IEV4aXQgVG9vbCIsDQogICAgICAgIGYie1dISVRFfSIgKyAiLSIgKiA4MCArIGYie1JFU0VUfSIsDQogICAgICAgIGYie0JPTER9U3RhdHVzOntSRVNFVH0ge0dSRUVOIGlmIHN0YXRlIGVsc2UgUkVEfVsgeydBQ1RJVkUnIGlmIHN0YXRlIGVsc2UgJ0lOQUNUSVZFJ30gXXtSRVNFVH1cbiINCiAgICBdDQoNCiAgICBkZWYgY2VudGVyKGxpbmUpOiByZXR1cm4gbGluZS5jZW50ZXIoY29sdW1ucykNCg0KICAgICMgVG9wIHBhZGRpbmcgKDMgbGluZXMpDQogICAgcHJpbnQoIlxuIiAqIDMsIGVuZD0iIikNCg0KICAgIGZvciBsaW5lIGluIGFzY2lpX2FydDoNCiAgICAgICAgcHJpbnQoY2VudGVyKGxpbmUpKQ0KICAgIHByaW50KCkNCiAgICBmb3IgbGluZSBpbiBpbmZvX2Jsb2NrOg0KICAgICAgICBwcmludChjZW50ZXIobGluZSkpDQoNCg0KIyBEZXRlY3Rpb24gZnVuY3Rpb24NCmRlZiBlbmVteV9vbl9yaWdodCgpOg0KICAgIHdpdGggbXNzLm1zcygpIGFzIHNjdDoNCiAgICAgICAgZnJhbWUgPSBucC5hcnJheShzY3QuZ3JhYihTQ1JFRU5fUkVHSU9OKSkNCiAgICAgICAgZnJhbWUgPSBjdjIuY3Z0Q29sb3IoZnJhbWUsIGN2Mi5DT0xPUl9CR1JBMkJHUikNCg0KICAgIHJlc3VsdHMgPSBtb2RlbChmcmFtZSwgY29uZj1DT05GSURFTkNFX1RIUkVTSE9MRCwgdmVyYm9zZT1GYWxzZSkNCiAgICBjbGFzc2VzID0gcmVzdWx0c1swXS5ib3hlcy5jbHMuY3B1KCkubnVtcHkoKSBpZiByZXN1bHRzWzBdLmJveGVzIGVsc2UgW10NCg0KICAgIGZvciBjbHMgaW4gY2xhc3NlczoNCiAgICAgICAgaWYgaW50KGNscykgPT0gMDoNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgcmV0dXJuIEZhbHNlDQoNCiMgTWFpbiBsb29wDQpkZWYgbWFpbigpOg0KICAgIGFjdGl2ZSA9IEZhbHNlDQogICAgbGFzdF90b2dnbGUgPSAwDQogICAgcHJpbnRfYmFubmVyKGFjdGl2ZSkNCg0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIG5vdyA9IHRpbWUudGltZSgpDQoNCiAgICAgICAgaWYgaXNfcHJlc3NlZCh3aW4zMmNvbi5WS19GMikgYW5kIG5vdyAtIGxhc3RfdG9nZ2xlID4gMC41Og0KICAgICAgICAgICAgYWN0aXZlID0gbm90IGFjdGl2ZQ0KICAgICAgICAgICAgbGFzdF90b2dnbGUgPSBub3cNCiAgICAgICAgICAgIHByaW50X2Jhbm5lcihhY3RpdmUpDQoNCiAgICAgICAgaWYgaXNfcHJlc3NlZCh3aW4zMmNvbi5WS19GNCk6DQogICAgICAgICAgICBwcmludCgiXG5bLV0gRXhpdGluZyBDdXJzZWQgQWltIEFzc2lzdC4uLiIpDQogICAgICAgICAgICBicmVhaw0KDQogICAgICAgIGlmIGFjdGl2ZSBhbmQgbG1iX2hlbGQoKSBhbmQgZW5lbXlfb25fcmlnaHQoKToNCiAgICAgICAgICAgIG1vdmVfdmlydHVhbCgwLCBVUFdBUkRfRk9SQ0UpDQoNCiAgICAgICAgdGltZS5zbGVlcChTQ0FOX0lOVEVSVkFMKQ0KDQptYWluKCkNCiJAIHwgU2V0LUNvbnRlbnQgLUVuY29kaW5nIFVURjggJHRlbXBQeQ0KDQojIEluc3RhbGwgZGVwZW5kZW5jaWVzIHF1aWV0bHkNCnBpcCBpbnN0YWxsIHVsdHJhbHl0aWNzIG1zcyBweWF1dG9ndWkgb3BlbmN2LXB5dGhvbiBweXdpbjMyIC1xDQoNCiMgRXhlY3V0ZSB0aGUgZW1iZWRkZWQgc2NyaXB0DQpweXRob24gJHRlbXBQeQ0KDQojIENsZWFuIHVwIGFmdGVyIGV4aXQNClJlbW92ZS1JdGVtICR0ZW1wUHkgLUZvcmNlDQo=';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;

